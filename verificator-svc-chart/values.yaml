# Default values for template.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1
NetworkPolicy: false
notsubchart: true
front: false

kind: Deployment
# if you want use pvc for storage enable this
persistence:
  enabled: false
  accessMode: ReadWriteOnce
  size: 8Gi

# if you want use statefulset choose this kind and storage size
# kind: Statefulset
# persistence:
#   accessMode: ReadWriteOnce
#   size: 8Gi

image:
  repository: ""
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

imagePullSecret:
  labels: {}
  annotations: {}
  enabled: false
  registryURL: "registry.gitlab.com"
  secretName: "registry.gitlab.com"
  username: ""
  password: ""


vpa: false

env:
  enable: true
  data:
  - name: KV_VIPER_FILE
    value: /config/config.yaml



arg:
  enable: false
  data:
  - "sh"
  - "-c"
  - "template migrate up && template run"

command:
  enable: true
  data:
  - "sh"
  - "-c"
  - "verificator-svc migrate up && verificator-svc run service"


config:
  create: true
  createBucket: false
  name: config.yaml
  mountPathFront: "/usr/share/nginx/html/static/env.js" #if front enabled
  mountPathFront2: "/usr/share/nginx/html/env.js" #if front enabled
  appID: "" #if front enabled
  mountPath: "/config"
  data:
    log:
      level: debug
      disable_sentry: true

    db:
      url: postgres://verificator:verificator@verificator-pg:5432/verificator?sslmode=disable

    listener:
      addr: :8000

    cop:
      disabled: true
      endpoint: "http://..."
      upstream: "http://..."
      service_name: verificator-svc
      service_port: 80



postgresql:
  enabled: true
  commonAnnotations:
    priorityClassName: production-high
  fullnameOverride: verificator-pg
  nameOverride: "verificator-pg"
  auth:
    username: "verificator"
    password: "verificator"
    database: "verificator"
  primary:
    persistence:
      size: "64Gi"
    containerSecurityContext:
      readOnlyRootFilesystem: true
    resources:
      limits:
        memory: 256Mi
        cpu: 250m
      requests:
        memory: 50Mi
        cpu: 50m
    extraVolumes:
    - name: repmgrconfdir
      emptyDir:
        medium: "Memory"
    - name: confdir
      emptyDir:
        medium: "Memory"
    - name: confddir
      emptyDir:
        medium: "Memory"
    - name: tmp
      emptyDir:
        medium: "Memory"
    - name: tmppostgres
      emptyDir:
        medium: "Memory"
    - name: tmprepmgr
      emptyDir:
        medium: "Memory"
    extraVolumeMounts:
    - name: tmp
      mountPath: /tmp
    - name: confdir
      mountPath: /opt/bitnami/postgresql/conf
    - name: confddir
      mountPath: /opt/bitnami/postgresql/conf/conf.d
    - name: repmgrconfdir
      mountPath: /opt/bitnami/repmgr/conf
    - name: tmppostgres
      mountPath: /opt/bitnami/postgresql/tmp
    - name: tmprepmgr
      mountPath: /opt/bitnami/repmgr/tmp
    initContainers:
    - name: prepare-rw-conf
      image: bitnami/postgresql:11.10.0-debian-10-r0
      resources:
        limits:
          memory: 256Mi
          cpu: 250m
        requests:
          memory: 50Mi
          cpu: 50m
      securityContext:
        readOnlyRootFilesystem: true
        runAsUser: 1001
      volumeMounts:
      - name: confdir
        mountPath: /rw
      command:
      - sh
      - -eux
      - -c
      - |
        # Prepare rw paths
        rm -rf /rw/*
        cp -rT /opt/bitnami/postgresql/conf/ /rw


serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
# fsGroup: 2000

securityContext: 
  # capabilities:
  #   drop:
  #   - ALL
  readOnlyRootFilesystem: true
  # runAsNonRoot: true
  runAsUser: 1000
  capabilities:
    drop:
    - ALL

service:
  type: ClusterIP
  port: 8000

ingress:
  enabled: false
  className: ""
  domain: "template.com"
  annotations:
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Signature,Account-Id,Authorization"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, PATCH, OPTIONS,DELETE"
    nginx.ingress.kubernetes.io/cors-allow-origin: '*'
    nginx.ingress.kubernetes.io/cors-max-age: "1728000"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    cert-manager.io/cluster-issuer: letsencrypt
    certmanager.k8s.io/cluster-issuer: letsencrypt
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: "true"
  hosts:
  - host:
    paths:
    - path: /
      pathType: ImplementationSpecific
  tls:
  - secretName: template

resources:
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  limits:
    cpu: 100m
    memory: 128Mi
  requests:
    cpu: 100m
    memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

probes: {}
#  readinessProbe:
#    httpGet:
#      path: /
#      port: http
#  livenessProbe:
#    httpGet:
#      path: /
#      port: http
#  startupProbe:
#    httpGet:
#      path: /
#      port: http
#  tcpSocket:
#    port: 8000
#  exec:
#    command: [ "cat", "/var/log/nginx/error.log" ]

extraVolume: []
  # - name: extra-volume
  #   mountPath: /extra-volume

tests: false

nodeSelector: {}

tolerations: []

affinity: {}
